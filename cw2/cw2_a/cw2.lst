Microsoft (R) Macro Assembler Version 6.14.8444		    03/01/20 10:19:40
.\cw2\cw2.asm						     Page 1 - 1


				;Aplikacja przesy³¹nie danych i zarzadzanie danymi
				.586
				.MODEL flat, STDCALL
				;--- stale ---
				;--- z pliku windows.inc ---
 =-0000000A			STD_INPUT_HANDLE equ -10
 =-0000000B			STD_OUTPUT_HANDLE equ -11
				;--- funkcje API Win32 ---
				;--- z pliku user32.inc ---
				CharToOemA PROTO :DWORD,:DWORD
				;--- z pliku kernel32.inc ---
				GetStdHandle PROTO :DWORD
				ReadConsoleA PROTO :DWORD,:DWORD,:DWORD,:DWORD,:DWORD
				WriteConsoleA PROTO :DWORD,:DWORD,:DWORD,:DWORD,:DWORD
				ExitProcess PROTO :DWORD
				wsprintfA PROTO C :VARARG
				lstrlenA PROTO :DWORD
				;-------------
				includelib .\lib\user32.lib
				includelib .\lib\kernel32.lib
				;-------------
 00000000			_DATA SEGMENT
 00000000 00000000		hout DD ?
 00000004 00000000		hinp DD ?
 00000008 41 75 74 6F 72	naglow DB "Autor aplikacji Grzegorz Makowski i53",0                ; nag³ówek
	   20 61 70 6C 69
	   6B 61 63 6A 69
	   20 47 72 7A 65
	   67 6F 72 7A 20
	   4D 61 6B 6F 77
	   73 6B 69 20 69
	   35 33 00
 0000002E 0D 0A 57 61 72	wzor DB 0Dh,0Ah,"Wariant 8 Fun. A/B-C+D",0                       ; tekst formatuj¹cy
	   69 61 6E 74 20
	   38 20 46 75 6E
	   2E 20 41 2F 42
	   2D 43 2B 44 00
				ALIGN 4                                                         ; wyrównanie do granicy 4-bajtowej
 00000048 00000040		rozmN DD $ - naglow                                             ;ilosc znakow w tablocy
 0000004C 41 2F 42 2D 43	tab1 DB "A/B-C+D", 0
	   2B 44 00
 00000054 0D 0A 00		nowa DB 0Dh, 0Ah, 0
				ALIGN 4                                                         ; przesuniece do adresu podzielonego na 4
 00000058 00000000		rout DD 0                                                       ; faktyczna iloœæ wyprowadzonych znaków
 0000005C 00000000		rinp DD 0 
 00000060 00000008		rbuf DD 8                                                      ; faktyczna iloœæ wprowadzonych znaków
 00000064 44 7A 69 EA 6B	tekstZakoncz DB "Dziêkujê za uwagê! PWSBIA@2020",0                ; nag³ówek
	   75 6A EA 20 7A
	   61 20 75 77 61
	   67 EA 21 20 50
	   57 53 42 49 41
	   40 32 30 32 30
	   00
 00000083 0000001F		rozmZ DD $ - tekstZakoncz
 00000087  00000008 [		bufor DD 8 dup (?)                                               
	    00000000
	   ]

 000000A7			_DATA ENDS
 00000000			_TEXT SEGMENT

 00000000			start:
 00000000
				;--- wywo³anie funkcji GetStdHandle- Deskryptor konsoli

 00000000  6A F5		push STD_OUTPUT_HANDLE
 00000002  E8 00000000 E	call GetStdHandle                                               ; wywo³anie funkcji GetStdHandle
 00000007  A3 00000000 R	mov hout, EAX                                                   ; deskryptor wyjœciowego bufora konsoli
 0000000C  6A F6		push STD_INPUT_HANDLE
 0000000E  E8 00000000 E	call GetStdHandle                                               ; wywo³anie funkcji GetStdHandle
 00000013  A3 00000004 R	mov hinp, EAX                                                   ; deskryptor wejœciowego bufora konsoli

				;--- nag³ówek ---------

 00000018  68 00000008 R	push OFFSET naglow
 0000001D  68 00000008 R	push OFFSET naglow
 00000022  E8 00000000 E	call CharToOemA                                                 ; konwersja polskich znaków

				;--- wyœwietlenie ---------

 00000027  6A 00		push 0                                                          ; rezerwa, musi byæ zero
 00000029  68 00000058 R	push OFFSET rout                                                ; wskaŸnik na faktyczn¹ iloœæ wyprowadzonych znaków
 0000002E  FF 35 00000048 R	push rozmN                                                      ; iloœæ znaków
 00000034  68 00000008 R	push OFFSET naglow                                              ; wska¿nik na tekst
				;push OFFSET wzor
 00000039  FF 35 00000000 R	push hout                                                       ; deskryptor buforu konsoli
 0000003F  E8 00000000 E	call WriteConsoleA                                              ; wywo³anie funkcji WriteConsoleA

				;--- wyœwietlenie nowej lini ---------

 00000044  6A 00		push 0                                                          ; rezerwa, musi byæ zero
 00000046  68 00000058 R	push OFFSET rout                                                ; wskaŸnik na faktyczn¹ iloœæ wyprowadzonych znaków
 0000004B  6A 02		push 2                                                          ; iloœæ znaków
 0000004D  68 00000054 R	push OFFSET nowa                                                ; wskaŸnik na tekst
 00000052  FF 35 00000000 R	push hout                                                       ; deskryptor buforu konsoli
 00000058  E8 00000000 E	call WriteConsoleA                                              ; wywo³anie funkcji WriteConsoleA

				;--- wyœwietlenie tab1 ---

 0000005D  6A 00		push 0                                                          ; rezerwa, musi byæ zero
 0000005F  68 00000058 R	push OFFSET rout                                                ; wskaŸnik na faktyczn¹ iloœæ wyprowadzonych znaków
 00000064  6A 08		push 8                                                          ; iloœæ znaków
 00000066  68 0000004C R	push OFFSET tab1                                                ; wska¿nik na tekst
 0000006B  FF 35 00000000 R	push hout                                                       ; deskryptor buforu konsoli
 00000071  E8 00000000 E	call WriteConsoleA                                              ; wywo³anie funkcji WriteConsoleA

				;-- punkt a)

 00000076  BB 0000004C R	mov EBX, OFFSET tab1
 0000007B  8B 0B		mov ECX, DWORD PTR [EBX]                                        ; w DWORD urkyte 4 bajty
 0000007D  8B 53 04		mov EDX, DWORD PTR [EBX+4]                                      ; adres w EBX + 4
 00000080  8D 1D 00000087 R	lea EBX, bufor
 00000086  87 CA		xchg ECX, EDX                                                   ; zamiana miejscami
 00000088  89 0B		mov DWORD PTR [EBX], ECX                                        ; zapisanie z powrotem z przesuniêtymi znakami
 0000008A  89 53 04		mov DWORD PTR [EBX+4], EDX

				;--- wyœwietlenie nowej lini ---------

 0000008D  6A 00		push 0                                                          ; rezerwa, musi byæ zero
 0000008F  68 00000058 R	push OFFSET rout                                                ; wskaŸnik na faktyczn¹ iloœæ wyprowadzonych znaków
 00000094  6A 02		push 2                                                          ; iloœæ znaków
 00000096  68 00000054 R	push OFFSET nowa                                                ; wskaŸnik na tekst
 0000009B  FF 35 00000000 R	push hout                                                       ; deskryptor buforu konsoli
 000000A1  E8 00000000 E	call WriteConsoleA                                              ; wywo³anie funkcji WriteConsoleA

				;--- wyœwietlenie bufor ---

 000000A6  6A 00		push 0                                                          ; rezerwa, musi byæ zero
 000000A8  68 00000058 R	push OFFSET rout                                                ; wskaŸnik na faktyczn¹ iloœæ wyprowadzonych znaków
 000000AD  6A 08		push 8                                                          ; iloœæ znaków
 000000AF  68 00000087 R	push OFFSET bufor                                               ; wska¿nik na tekst
 000000B4  FF 35 00000000 R	push hout                                                       ; deskryptor buforu konsoli
 000000BA  E8 00000000 E	call WriteConsoleA                                              ; wywo³anie funkcji WriteConsoleA

				;--- wyœwietlenie nowej lini ---------

 000000BF  6A 00		push 0                                                          ; rezerwa, musi byæ zero
 000000C1  68 00000058 R	push OFFSET rout                                                ; wskaŸnik na faktyczn¹ iloœæ wyprowadzonych znaków
 000000C6  6A 02		push 2                                                          ; iloœæ znaków
 000000C8  68 00000054 R	push OFFSET nowa                                                ; wskaŸnik na tekst
 000000CD  FF 35 00000000 R	push hout                                                       ; deskryptor buforu konsoli
 000000D3  E8 00000000 E	call WriteConsoleA        

				;--- wyœwietlenie zakonczenia ---

 000000D8  6A 00		push 0                                                          ; rezerwa, musi byæ zero
 000000DA  68 00000058 R	push OFFSET rout                                                ; wskaŸnik na faktyczn¹ iloœæ wyprowadzonych znaków
 000000DF  FF 35 00000083 R	push rozmZ  
 000000E5  68 00000064 R	push OFFSET tekstZakoncz
 000000EA  68 00000064 R	push OFFSET tekstZakoncz
 000000EF  E8 00000000 E	call CharToOemA

 000000F4  6A 00		push 0                                                          ; rezerwa, musi byæ zero
 000000F6  68 00000058 R	push OFFSET rout                                                ; wskaŸnik na faktyczn¹ iloœæ wyprowadzonych znaków
 000000FB  FF 35 00000083 R	push rozmZ                                                      ; iloœæ znaków
 00000101  68 00000064 R	push OFFSET tekstZakoncz                                        ; wska¿nik na tekst
 00000106  FF 35 00000000 R	push hout                                                       ; deskryptor buforu konsoli
 0000010C  E8 00000000 E	call WriteConsoleA                                              ; wywo³anie funkcji WriteConsoleA


				;--- zakoñczenie procesu ---------

 00000111  6A 00		push 0
 00000113  E8 00000000 E	call ExitProcess                                                ; wywo³anie funkcji ExitProcess
 00000118 00000118		ScanInt PROC
				;; funkcja ScanInt przekszta³ca ci¹g cyfr do liczby, któr¹ jest zwracana przez EAX
				;; argument - zakoñczony zerem wiersz z cyframi
				;; rejestry: EBX - adres wiersza, EDX - znak liczby, ESI - indeks cyfry w wierszu, EDI - tymczasowy
				;--- pocz¹tek funkcji
 00000118  55			push EBP
 00000119  8B EC		mov EBP, ESP                                                    ; wskaŸnik stosu ESP przypisujemy do EBP
				;--- odk³adanie na stos
 0000011B  53			push EBX
 0000011C  51			push ECX
 0000011D  52			push EDX
 0000011E  56			push ESI
 0000011F  57			push EDI

				;--- przygotowywanie cyklu

 00000120  8B 5D 08		mov EBX, [EBP+8]
 00000123  53			push EBX
 00000124  E8 00000000 E	call lstrlenA
 00000129  8B F8		mov EDI, EAX ; iloœæ znaków
 0000012B  8B C8		mov ECX, EAX ; iloœæ powtórzeñ = iloœæ znaków
 0000012D  33 F6		xor ESI, ESI ; wyzerowanie ESI
 0000012F  33 D2		xor EDX, EDX ; wyzerowanie EDX
 00000131  33 C0		xor EAX, EAX ; wyzerowanie EAX
 00000133  8B 5D 08		mov EBX, [EBP+8] ; adres tekstu
				;--- cykl --------------------------
 00000136			pocz:
 00000136  80 3C 1E 00		cmp BYTE PTR [EBX+ESI], 0h ;porównanie z kodem \0
 0000013A  75 02		jne @F
 0000013C  EB 4A		jmp et4
 0000013E			@@:
 0000013E  80 3C 1E 0D		cmp BYTE PTR [EBX+ESI], 0Dh ;porównanie z kodem CR
 00000142  75 02		jne @F
 00000144  EB 42		jmp et4
 00000146			@@:
 00000146  80 3C 1E 0A		cmp BYTE PTR [EBX+ESI], 0Ah ;porównanie z kodem LF
 0000014A  75 02		jne @F
 0000014C  EB 3A		jmp et4
 0000014E			@@:
 0000014E  80 3C 1E 2D		cmp BYTE PTR [EBX+ESI], 02Dh ;porównanie z kodem -
 00000152  75 07		jne @F
 00000154  BA 00000001		mov EDX, 1
 00000159  EB 24		jmp nast
 0000015B			@@:
 0000015B  80 3C 1E 30		cmp BYTE PTR [EBX+ESI], 030h ;porównanie z kodem 0
 0000015F  73 02		jae @F
 00000161  EB 1C		jmp nast
 00000163			@@:
 00000163  80 3C 1E 39		cmp BYTE PTR [EBX+ESI], 039h ;porównanie z kodem 9
 00000167  76 02		jbe @F
 00000169  EB 14		jmp nast
				;----
 0000016B			@@:
 0000016B  52			push EDX ; do EDX procesor mo¿e zapisaæ wynik mno¿enia
 0000016C  BF 0000000A		mov EDI, 10
 00000171  F7 E7		mul EDI ;mno¿enie EAX * EDI
 00000173  8B F8		mov EDI, EAX ; tymczasowo z EAX do EDI
 00000175  33 C0		xor EAX, EAX ;zerowani EAX
 00000177  8A 04 1E		mov AL, BYTE PTR [EBX+ESI]
 0000017A  2C 30		sub AL, 030h ; korekta: cyfra = kod znaku - kod 0
 0000017C  03 C7		add EAX, EDI ; dodanie cyfry
 0000017E  5A			pop EDX
 0000017F			nast:
 0000017F  46			inc ESI
 00000180  E2 B4		loop pocz
				;--- wynik
 00000182  0B D2		or EDX, EDX ;analiza znacznika EDX
 00000184  74 02		jz @F
 00000186  F7 D8		neg EAX
 00000188			@@:
 00000188			et4:
				;--- zdejmowanie ze stosu
 00000188  5F			pop EDI
 00000189  5E			pop ESI
 0000018A  5A			pop EDX
 0000018B  59			pop ECX
 0000018C  5B			pop EBX
				;--- powrót
 0000018D  8B E5		mov ESP, EBP                                            ; przywracamy wskaŸnik stosu ESP
 0000018F  5D			pop EBP
 00000190  C3			ret
 00000191			ScanInt ENDP
 00000191			_TEXT ENDS

				END start
Microsoft (R) Macro Assembler Version 6.14.8444		    03/01/20 10:19:40
.\cw2\cw2.asm						     Symbols 2 - 1




Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
_DATA  . . . . . . . . . . . . .	32 Bit	 000000A7 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000191 Para	  Public  'CODE'	


Procedures,  parameters and locals:

                N a m e                 Type     Value    Attr

$$$00001 . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000118 Private STDCALL
CharToOemA . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ScanInt  . . . . . . . . . . . .	P Near	 00000118 _TEXT	Length= 00000079 Public STDCALL
  pocz . . . . . . . . . . . . .	L Near	 00000136 _TEXT	
  nast . . . . . . . . . . . . .	L Near	 0000017F _TEXT	
  et4  . . . . . . . . . . . . .	L Near	 00000188 _TEXT	
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
lstrlenA . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
bufor  . . . . . . . . . . . . .	DWord	 00000087 _DATA	
hinp . . . . . . . . . . . . . .	DWord	 00000004 _DATA	
hout . . . . . . . . . . . . . .	DWord	 00000000 _DATA	
naglow . . . . . . . . . . . . .	Byte	 00000008 _DATA	
nowa . . . . . . . . . . . . . .	Byte	 00000054 _DATA	
rbuf . . . . . . . . . . . . . .	DWord	 00000060 _DATA	
rinp . . . . . . . . . . . . . .	DWord	 0000005C _DATA	
rout . . . . . . . . . . . . . .	DWord	 00000058 _DATA	
rozmN  . . . . . . . . . . . . .	DWord	 00000048 _DATA	
rozmZ  . . . . . . . . . . . . .	DWord	 00000083 _DATA	
start  . . . . . . . . . . . . .	L Near	 00000000 _TEXT	Public STDCALL
tab1 . . . . . . . . . . . . . .	Byte	 0000004C _DATA	
tekstZakoncz . . . . . . . . . .	Byte	 00000064 _DATA	
wzor . . . . . . . . . . . . . .	Byte	 0000002E _DATA	

	   0 Warnings
	   0 Errors
